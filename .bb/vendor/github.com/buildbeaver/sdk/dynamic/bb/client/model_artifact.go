/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Artifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Artifact{}

// Artifact struct for Artifact
type Artifact struct {
	// A link to the Artifact on the BuildBeaver server
	Url string `json:"url"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Etag string `json:"etag"`
	// Name of the artifact.
	Name string `json:"name"`
	// The ID of the step (within a job) that created this artifact.
	StepId string `json:"step_id"`
	// The name associated with the one or more artifacts identified by an ArtifactDefinition in the build config.
	GroupName string `json:"group_name"`
	// The filesystem path that the artifact was found at, relative to the job workspace.
	Path string `json:"path"`
	// tThe type of hashing algorithm used to hash the data.
	HashType string `json:"hash_type"`
	// The hex-encoded hash of the artifact data. This This may be set later if the hash is not known yet.
	Hash string `json:"hash"`
	// Size of the artifact file in bytes.
	Size int32 `json:"size"`
	// Mime type of the artifact, or empty if not known.
	Mime string `json:"mime"`
	// Sealed is true once the data for the artifact has successfully been uploaded and the file contents are now locked. Until Sealed is true various pieces of metadata such as the file size and hash etc. will be unset. Note that if sealed is false it doesn't necessarily mean no data has been uploaded to the blob store yet, and so we must still verify that the backing data is deleted before garbage collecting unsealed artifact files.
	Sealed bool `json:"sealed"`
	// URL to use for fetching the bytes of data making up the artifact.
	DataUrl string `json:"data_url"`
	AdditionalProperties map[string]interface{}
}

type _Artifact Artifact

// NewArtifact instantiates a new Artifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifact(url string, id string, createdAt time.Time, updatedAt time.Time, etag string, name string, stepId string, groupName string, path string, hashType string, hash string, size int32, mime string, sealed bool, dataUrl string) *Artifact {
	this := Artifact{}
	this.Url = url
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Etag = etag
	this.Name = name
	this.StepId = stepId
	this.GroupName = groupName
	this.Path = path
	this.HashType = hashType
	this.Hash = hash
	this.Size = size
	this.Mime = mime
	this.Sealed = sealed
	this.DataUrl = dataUrl
	return &this
}

// NewArtifactWithDefaults instantiates a new Artifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactWithDefaults() *Artifact {
	this := Artifact{}
	return &this
}

// GetUrl returns the Url field value
func (o *Artifact) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Artifact) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *Artifact) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Artifact) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Artifact) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Artifact) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Artifact) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Artifact) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetEtag returns the Etag field value
func (o *Artifact) GetEtag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Etag
}

// GetEtagOk returns a tuple with the Etag field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetEtagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Etag, true
}

// SetEtag sets field value
func (o *Artifact) SetEtag(v string) {
	o.Etag = v
}

// GetName returns the Name field value
func (o *Artifact) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Artifact) SetName(v string) {
	o.Name = v
}

// GetStepId returns the StepId field value
func (o *Artifact) GetStepId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepId
}

// GetStepIdOk returns a tuple with the StepId field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetStepIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepId, true
}

// SetStepId sets field value
func (o *Artifact) SetStepId(v string) {
	o.StepId = v
}

// GetGroupName returns the GroupName field value
func (o *Artifact) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *Artifact) SetGroupName(v string) {
	o.GroupName = v
}

// GetPath returns the Path field value
func (o *Artifact) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Artifact) SetPath(v string) {
	o.Path = v
}

// GetHashType returns the HashType field value
func (o *Artifact) GetHashType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HashType
}

// GetHashTypeOk returns a tuple with the HashType field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetHashTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HashType, true
}

// SetHashType sets field value
func (o *Artifact) SetHashType(v string) {
	o.HashType = v
}

// GetHash returns the Hash field value
func (o *Artifact) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *Artifact) SetHash(v string) {
	o.Hash = v
}

// GetSize returns the Size field value
func (o *Artifact) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Artifact) SetSize(v int32) {
	o.Size = v
}

// GetMime returns the Mime field value
func (o *Artifact) GetMime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mime
}

// GetMimeOk returns a tuple with the Mime field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetMimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mime, true
}

// SetMime sets field value
func (o *Artifact) SetMime(v string) {
	o.Mime = v
}

// GetSealed returns the Sealed field value
func (o *Artifact) GetSealed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sealed
}

// GetSealedOk returns a tuple with the Sealed field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetSealedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sealed, true
}

// SetSealed sets field value
func (o *Artifact) SetSealed(v bool) {
	o.Sealed = v
}

// GetDataUrl returns the DataUrl field value
func (o *Artifact) GetDataUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataUrl
}

// GetDataUrlOk returns a tuple with the DataUrl field value
// and a boolean to check if the value has been set.
func (o *Artifact) GetDataUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataUrl, true
}

// SetDataUrl sets field value
func (o *Artifact) SetDataUrl(v string) {
	o.DataUrl = v
}

func (o Artifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Artifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["etag"] = o.Etag
	toSerialize["name"] = o.Name
	toSerialize["step_id"] = o.StepId
	toSerialize["group_name"] = o.GroupName
	toSerialize["path"] = o.Path
	toSerialize["hash_type"] = o.HashType
	toSerialize["hash"] = o.Hash
	toSerialize["size"] = o.Size
	toSerialize["mime"] = o.Mime
	toSerialize["sealed"] = o.Sealed
	toSerialize["data_url"] = o.DataUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Artifact) UnmarshalJSON(bytes []byte) (err error) {
	varArtifact := _Artifact{}

	if err = json.Unmarshal(bytes, &varArtifact); err == nil {
		*o = Artifact(varArtifact)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "etag")
		delete(additionalProperties, "name")
		delete(additionalProperties, "step_id")
		delete(additionalProperties, "group_name")
		delete(additionalProperties, "path")
		delete(additionalProperties, "hash_type")
		delete(additionalProperties, "hash")
		delete(additionalProperties, "size")
		delete(additionalProperties, "mime")
		delete(additionalProperties, "sealed")
		delete(additionalProperties, "data_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArtifact struct {
	value *Artifact
	isSet bool
}

func (v NullableArtifact) Get() *Artifact {
	return v.value
}

func (v *NullableArtifact) Set(val *Artifact) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifact(val *Artifact) *NullableArtifact {
	return &NullableArtifact{value: val, isSet: true}
}

func (v NullableArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


