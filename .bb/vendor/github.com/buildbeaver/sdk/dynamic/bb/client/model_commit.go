/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Commit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Commit{}

// Commit struct for Commit
type Commit struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	// ID of the repo that the commit was made against.
	RepoId string `json:"repo_id"`
	// The type of the config file found in the commit (Config itself is not included in the document).
	ConfigType string `json:"config_type"`
	// The unique SHA hash of the commit.
	Sha string `json:"sha"`
	// The commit message.
	Message string `json:"message"`
	// The ID of the legal entity that authored the commit, if known.
	AuthorId string `json:"author_id"`
	// The author name recorded on the commit.
	AuthorName string `json:"author_name"`
	// The author email address recorded on the commit.
	AuthorEmail string `json:"author_email"`
	// The ID of the legal entity that committed the commit, if known.
	CommitterId string `json:"committer_id"`
	// The committer name recorded on the commit, if any.
	CommitterName string `json:"committer_name"`
	// The committer email address recorded on the commit, if any.
	CommitterEmail string `json:"committer_email"`
	// A link (URL) to the Commit in the SCM, for users to browse to.
	Link string `json:"link"`
	// URL to fetch additional information about the committer of this commit.
	CommitterUrl string `json:"committer_url"`
	// URL to fetch additional information about the author of this commit.
	AuthorUrl string `json:"author_url"`
	AdditionalProperties map[string]interface{}
}

type _Commit Commit

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit(id string, createdAt time.Time, repoId string, configType string, sha string, message string, authorId string, authorName string, authorEmail string, committerId string, committerName string, committerEmail string, link string, committerUrl string, authorUrl string) *Commit {
	this := Commit{}
	this.Id = id
	this.CreatedAt = createdAt
	this.RepoId = repoId
	this.ConfigType = configType
	this.Sha = sha
	this.Message = message
	this.AuthorId = authorId
	this.AuthorName = authorName
	this.AuthorEmail = authorEmail
	this.CommitterId = committerId
	this.CommitterName = committerName
	this.CommitterEmail = committerEmail
	this.Link = link
	this.CommitterUrl = committerUrl
	this.AuthorUrl = authorUrl
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetId returns the Id field value
func (o *Commit) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Commit) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Commit) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Commit) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Commit) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetRepoId returns the RepoId field value
func (o *Commit) GetRepoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value
// and a boolean to check if the value has been set.
func (o *Commit) GetRepoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoId, true
}

// SetRepoId sets field value
func (o *Commit) SetRepoId(v string) {
	o.RepoId = v
}

// GetConfigType returns the ConfigType field value
func (o *Commit) GetConfigType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value
// and a boolean to check if the value has been set.
func (o *Commit) GetConfigTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigType, true
}

// SetConfigType sets field value
func (o *Commit) SetConfigType(v string) {
	o.ConfigType = v
}

// GetSha returns the Sha field value
func (o *Commit) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *Commit) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *Commit) SetSha(v string) {
	o.Sha = v
}

// GetMessage returns the Message field value
func (o *Commit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Commit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Commit) SetMessage(v string) {
	o.Message = v
}

// GetAuthorId returns the AuthorId field value
func (o *Commit) GetAuthorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorId, true
}

// SetAuthorId sets field value
func (o *Commit) SetAuthorId(v string) {
	o.AuthorId = v
}

// GetAuthorName returns the AuthorName field value
func (o *Commit) GetAuthorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorName, true
}

// SetAuthorName sets field value
func (o *Commit) SetAuthorName(v string) {
	o.AuthorName = v
}

// GetAuthorEmail returns the AuthorEmail field value
func (o *Commit) GetAuthorEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorEmail
}

// GetAuthorEmailOk returns a tuple with the AuthorEmail field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorEmail, true
}

// SetAuthorEmail sets field value
func (o *Commit) SetAuthorEmail(v string) {
	o.AuthorEmail = v
}

// GetCommitterId returns the CommitterId field value
func (o *Commit) GetCommitterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitterId
}

// GetCommitterIdOk returns a tuple with the CommitterId field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitterId, true
}

// SetCommitterId sets field value
func (o *Commit) SetCommitterId(v string) {
	o.CommitterId = v
}

// GetCommitterName returns the CommitterName field value
func (o *Commit) GetCommitterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitterName
}

// GetCommitterNameOk returns a tuple with the CommitterName field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitterName, true
}

// SetCommitterName sets field value
func (o *Commit) SetCommitterName(v string) {
	o.CommitterName = v
}

// GetCommitterEmail returns the CommitterEmail field value
func (o *Commit) GetCommitterEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitterEmail
}

// GetCommitterEmailOk returns a tuple with the CommitterEmail field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitterEmail, true
}

// SetCommitterEmail sets field value
func (o *Commit) SetCommitterEmail(v string) {
	o.CommitterEmail = v
}

// GetLink returns the Link field value
func (o *Commit) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Commit) GetLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Commit) SetLink(v string) {
	o.Link = v
}

// GetCommitterUrl returns the CommitterUrl field value
func (o *Commit) GetCommitterUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitterUrl
}

// GetCommitterUrlOk returns a tuple with the CommitterUrl field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitterUrl, true
}

// SetCommitterUrl sets field value
func (o *Commit) SetCommitterUrl(v string) {
	o.CommitterUrl = v
}

// GetAuthorUrl returns the AuthorUrl field value
func (o *Commit) GetAuthorUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorUrl
}

// GetAuthorUrlOk returns a tuple with the AuthorUrl field value
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorUrl, true
}

// SetAuthorUrl sets field value
func (o *Commit) SetAuthorUrl(v string) {
	o.AuthorUrl = v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Commit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["repo_id"] = o.RepoId
	toSerialize["config_type"] = o.ConfigType
	toSerialize["sha"] = o.Sha
	toSerialize["message"] = o.Message
	toSerialize["author_id"] = o.AuthorId
	toSerialize["author_name"] = o.AuthorName
	toSerialize["author_email"] = o.AuthorEmail
	toSerialize["committer_id"] = o.CommitterId
	toSerialize["committer_name"] = o.CommitterName
	toSerialize["committer_email"] = o.CommitterEmail
	toSerialize["link"] = o.Link
	toSerialize["committer_url"] = o.CommitterUrl
	toSerialize["author_url"] = o.AuthorUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Commit) UnmarshalJSON(bytes []byte) (err error) {
	varCommit := _Commit{}

	if err = json.Unmarshal(bytes, &varCommit); err == nil {
		*o = Commit(varCommit)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "repo_id")
		delete(additionalProperties, "config_type")
		delete(additionalProperties, "sha")
		delete(additionalProperties, "message")
		delete(additionalProperties, "author_id")
		delete(additionalProperties, "author_name")
		delete(additionalProperties, "author_email")
		delete(additionalProperties, "committer_id")
		delete(additionalProperties, "committer_name")
		delete(additionalProperties, "committer_email")
		delete(additionalProperties, "link")
		delete(additionalProperties, "committer_url")
		delete(additionalProperties, "author_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


