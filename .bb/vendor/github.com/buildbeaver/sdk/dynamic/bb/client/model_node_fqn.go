/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the NodeFQN type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeFQN{}

// NodeFQN struct for NodeFQN
type NodeFQN struct {
	WorkflowName string `json:"workflow_name"`
	JobName string `json:"job_name"`
	StepName string `json:"step_name"`
	AdditionalProperties map[string]interface{}
}

type _NodeFQN NodeFQN

// NewNodeFQN instantiates a new NodeFQN object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeFQN(workflowName string, jobName string, stepName string) *NodeFQN {
	this := NodeFQN{}
	this.WorkflowName = workflowName
	this.JobName = jobName
	this.StepName = stepName
	return &this
}

// NewNodeFQNWithDefaults instantiates a new NodeFQN object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeFQNWithDefaults() *NodeFQN {
	this := NodeFQN{}
	return &this
}

// GetWorkflowName returns the WorkflowName field value
func (o *NodeFQN) GetWorkflowName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkflowName
}

// GetWorkflowNameOk returns a tuple with the WorkflowName field value
// and a boolean to check if the value has been set.
func (o *NodeFQN) GetWorkflowNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkflowName, true
}

// SetWorkflowName sets field value
func (o *NodeFQN) SetWorkflowName(v string) {
	o.WorkflowName = v
}

// GetJobName returns the JobName field value
func (o *NodeFQN) GetJobName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value
// and a boolean to check if the value has been set.
func (o *NodeFQN) GetJobNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobName, true
}

// SetJobName sets field value
func (o *NodeFQN) SetJobName(v string) {
	o.JobName = v
}

// GetStepName returns the StepName field value
func (o *NodeFQN) GetStepName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepName
}

// GetStepNameOk returns a tuple with the StepName field value
// and a boolean to check if the value has been set.
func (o *NodeFQN) GetStepNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepName, true
}

// SetStepName sets field value
func (o *NodeFQN) SetStepName(v string) {
	o.StepName = v
}

func (o NodeFQN) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeFQN) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workflow_name"] = o.WorkflowName
	toSerialize["job_name"] = o.JobName
	toSerialize["step_name"] = o.StepName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NodeFQN) UnmarshalJSON(bytes []byte) (err error) {
	varNodeFQN := _NodeFQN{}

	if err = json.Unmarshal(bytes, &varNodeFQN); err == nil {
		*o = NodeFQN(varNodeFQN)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "workflow_name")
		delete(additionalProperties, "job_name")
		delete(additionalProperties, "step_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNodeFQN struct {
	value *NodeFQN
	isSet bool
}

func (v NullableNodeFQN) Get() *NodeFQN {
	return v.value
}

func (v *NullableNodeFQN) Set(val *NodeFQN) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeFQN) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeFQN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeFQN(val *NodeFQN) *NullableNodeFQN {
	return &NullableNodeFQN{value: val, isSet: true}
}

func (v NullableNodeFQN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeFQN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


