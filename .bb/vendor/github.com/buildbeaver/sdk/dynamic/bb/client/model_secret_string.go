/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SecretString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretString{}

// SecretString struct for SecretString
type SecretString struct {
	// An explicit, non-secret value for an environment variable or field.
	Value *string `json:"value,omitempty"`
	// The name of the secret that contains the value, for an environment variable or field.
	ValueFromSecret *string `json:"value_from_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecretString SecretString

// NewSecretString instantiates a new SecretString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretString() *SecretString {
	this := SecretString{}
	return &this
}

// NewSecretStringWithDefaults instantiates a new SecretString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretStringWithDefaults() *SecretString {
	this := SecretString{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SecretString) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretString) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SecretString) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SecretString) SetValue(v string) {
	o.Value = &v
}

// GetValueFromSecret returns the ValueFromSecret field value if set, zero value otherwise.
func (o *SecretString) GetValueFromSecret() string {
	if o == nil || IsNil(o.ValueFromSecret) {
		var ret string
		return ret
	}
	return *o.ValueFromSecret
}

// GetValueFromSecretOk returns a tuple with the ValueFromSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretString) GetValueFromSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ValueFromSecret) {
		return nil, false
	}
	return o.ValueFromSecret, true
}

// HasValueFromSecret returns a boolean if a field has been set.
func (o *SecretString) HasValueFromSecret() bool {
	if o != nil && !IsNil(o.ValueFromSecret) {
		return true
	}

	return false
}

// SetValueFromSecret gets a reference to the given string and assigns it to the ValueFromSecret field.
func (o *SecretString) SetValueFromSecret(v string) {
	o.ValueFromSecret = &v
}

func (o SecretString) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueFromSecret) {
		toSerialize["value_from_secret"] = o.ValueFromSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretString) UnmarshalJSON(bytes []byte) (err error) {
	varSecretString := _SecretString{}

	if err = json.Unmarshal(bytes, &varSecretString); err == nil {
		*o = SecretString(varSecretString)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "value_from_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretString struct {
	value *SecretString
	isSet bool
}

func (v NullableSecretString) Get() *SecretString {
	return v.value
}

func (v *NullableSecretString) Set(val *SecretString) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretString) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretString(val *SecretString) *NullableSecretString {
	return &NullableSecretString{value: val, isSet: true}
}

func (v NullableSecretString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


