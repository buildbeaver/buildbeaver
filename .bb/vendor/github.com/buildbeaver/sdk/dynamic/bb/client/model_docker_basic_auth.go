/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DockerBasicAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerBasicAuth{}

// DockerBasicAuth struct for DockerBasicAuth
type DockerBasicAuth struct {
	Username SecretString `json:"username"`
	Password SecretString `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _DockerBasicAuth DockerBasicAuth

// NewDockerBasicAuth instantiates a new DockerBasicAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerBasicAuth(username SecretString, password SecretString) *DockerBasicAuth {
	this := DockerBasicAuth{}
	this.Username = username
	this.Password = password
	return &this
}

// NewDockerBasicAuthWithDefaults instantiates a new DockerBasicAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerBasicAuthWithDefaults() *DockerBasicAuth {
	this := DockerBasicAuth{}
	return &this
}

// GetUsername returns the Username field value
func (o *DockerBasicAuth) GetUsername() SecretString {
	if o == nil {
		var ret SecretString
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *DockerBasicAuth) GetUsernameOk() (*SecretString, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *DockerBasicAuth) SetUsername(v SecretString) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *DockerBasicAuth) GetPassword() SecretString {
	if o == nil {
		var ret SecretString
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *DockerBasicAuth) GetPasswordOk() (*SecretString, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *DockerBasicAuth) SetPassword(v SecretString) {
	o.Password = v
}

func (o DockerBasicAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerBasicAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DockerBasicAuth) UnmarshalJSON(bytes []byte) (err error) {
	varDockerBasicAuth := _DockerBasicAuth{}

	if err = json.Unmarshal(bytes, &varDockerBasicAuth); err == nil {
		*o = DockerBasicAuth(varDockerBasicAuth)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDockerBasicAuth struct {
	value *DockerBasicAuth
	isSet bool
}

func (v NullableDockerBasicAuth) Get() *DockerBasicAuth {
	return v.value
}

func (v *NullableDockerBasicAuth) Set(val *DockerBasicAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerBasicAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerBasicAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerBasicAuth(val *DockerBasicAuth) *NullableDockerBasicAuth {
	return &NullableDockerBasicAuth{value: val, isSet: true}
}

func (v NullableDockerBasicAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerBasicAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


