/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	// SequenceNumber is a monotonically increasing number to provide a well-defined order for events within a build. Event sequence numbers will normally (but not always) be contiguous for a given build.
	SequenceNumber int64 `json:"sequence_number"`
	// The ID of the build to fetch events for.
	BuildId string `json:"build_id"`
	// The type of event, determining what is expected in the event data.
	Type string `json:"type"`
	// The ID of the resource this event is associated with.
	ResourceId string `json:"resource_id"`
	// The name of the workflow this event is associated with, if applicable
	Workflow *string `json:"workflow,omitempty"`
	// The name of the job this event relates to, if applicable
	JobName *string `json:"job_name,omitempty"`
	// The name of the resource this event is associated with. For job-related events this will be the same as job_name.
	ResourceName string `json:"resource_name"`
	// Payload provides additional information for the event. The format of the payload data depends on the event Type.
	Payload string `json:"payload"`
	AdditionalProperties map[string]interface{}
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(id string, createdAt time.Time, sequenceNumber int64, buildId string, type_ string, resourceId string, resourceName string, payload string) *Event {
	this := Event{}
	this.Id = id
	this.CreatedAt = createdAt
	this.SequenceNumber = sequenceNumber
	this.BuildId = buildId
	this.Type = type_
	this.ResourceId = resourceId
	this.ResourceName = resourceName
	this.Payload = payload
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetId returns the Id field value
func (o *Event) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Event) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Event) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Event) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Event) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Event) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSequenceNumber returns the SequenceNumber field value
func (o *Event) GetSequenceNumber() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
func (o *Event) GetSequenceNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumber, true
}

// SetSequenceNumber sets field value
func (o *Event) SetSequenceNumber(v int64) {
	o.SequenceNumber = v
}

// GetBuildId returns the BuildId field value
func (o *Event) GetBuildId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value
// and a boolean to check if the value has been set.
func (o *Event) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildId, true
}

// SetBuildId sets field value
func (o *Event) SetBuildId(v string) {
	o.BuildId = v
}

// GetType returns the Type field value
func (o *Event) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Event) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Event) SetType(v string) {
	o.Type = v
}

// GetResourceId returns the ResourceId field value
func (o *Event) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *Event) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *Event) SetResourceId(v string) {
	o.ResourceId = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *Event) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow) {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *Event) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *Event) SetWorkflow(v string) {
	o.Workflow = &v
}

// GetJobName returns the JobName field value if set, zero value otherwise.
func (o *Event) GetJobName() string {
	if o == nil || IsNil(o.JobName) {
		var ret string
		return ret
	}
	return *o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetJobNameOk() (*string, bool) {
	if o == nil || IsNil(o.JobName) {
		return nil, false
	}
	return o.JobName, true
}

// HasJobName returns a boolean if a field has been set.
func (o *Event) HasJobName() bool {
	if o != nil && !IsNil(o.JobName) {
		return true
	}

	return false
}

// SetJobName gets a reference to the given string and assigns it to the JobName field.
func (o *Event) SetJobName(v string) {
	o.JobName = &v
}

// GetResourceName returns the ResourceName field value
func (o *Event) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *Event) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *Event) SetResourceName(v string) {
	o.ResourceName = v
}

// GetPayload returns the Payload field value
func (o *Event) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *Event) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *Event) SetPayload(v string) {
	o.Payload = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["sequence_number"] = o.SequenceNumber
	toSerialize["build_id"] = o.BuildId
	toSerialize["type"] = o.Type
	toSerialize["resource_id"] = o.ResourceId
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	if !IsNil(o.JobName) {
		toSerialize["job_name"] = o.JobName
	}
	toSerialize["resource_name"] = o.ResourceName
	toSerialize["payload"] = o.Payload

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(bytes []byte) (err error) {
	varEvent := _Event{}

	if err = json.Unmarshal(bytes, &varEvent); err == nil {
		*o = Event(varEvent)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "sequence_number")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "workflow")
		delete(additionalProperties, "job_name")
		delete(additionalProperties, "resource_name")
		delete(additionalProperties, "payload")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


