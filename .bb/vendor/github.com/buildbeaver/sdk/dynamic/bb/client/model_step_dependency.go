/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StepDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StepDependency{}

// StepDependency struct for StepDependency
type StepDependency struct {
	// The name of the step that must complete before this step.
	StepName string `json:"step_name"`
	AdditionalProperties map[string]interface{}
}

type _StepDependency StepDependency

// NewStepDependency instantiates a new StepDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStepDependency(stepName string) *StepDependency {
	this := StepDependency{}
	this.StepName = stepName
	return &this
}

// NewStepDependencyWithDefaults instantiates a new StepDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStepDependencyWithDefaults() *StepDependency {
	this := StepDependency{}
	return &this
}

// GetStepName returns the StepName field value
func (o *StepDependency) GetStepName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepName
}

// GetStepNameOk returns a tuple with the StepName field value
// and a boolean to check if the value has been set.
func (o *StepDependency) GetStepNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepName, true
}

// SetStepName sets field value
func (o *StepDependency) SetStepName(v string) {
	o.StepName = v
}

func (o StepDependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StepDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["step_name"] = o.StepName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StepDependency) UnmarshalJSON(bytes []byte) (err error) {
	varStepDependency := _StepDependency{}

	if err = json.Unmarshal(bytes, &varStepDependency); err == nil {
		*o = StepDependency(varStepDependency)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "step_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStepDependency struct {
	value *StepDependency
	isSet bool
}

func (v NullableStepDependency) Get() *StepDependency {
	return v.value
}

func (v *NullableStepDependency) Set(val *StepDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableStepDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableStepDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepDependency(val *StepDependency) *NullableStepDependency {
	return &NullableStepDependency{value: val, isSet: true}
}

func (v NullableStepDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


