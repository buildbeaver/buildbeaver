/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the LogDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogDescriptor{}

// LogDescriptor struct for LogDescriptor
type LogDescriptor struct {
	// A link to the Log Descriptor on the BuildBeaver server
	Url string `json:"url"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Etag string `json:"etag"`
	// The ID of the log descriptor that this one is nested within.
	ParentLogId string `json:"parent_log_id"`
	// The ID of the resource that this log belongs to.
	ResourceId string `json:"resource_id"`
	// Sealed is set to true when the log is completed and has become immutable.
	Sealed bool `json:"sealed"`
	// The size of the log, in bytes, calculated and set at the time the log is sealed.
	SizeBytes int64 `json:"size_bytes"`
	// URL to use for fetching the log data.
	DataUrl string `json:"data_url"`
	AdditionalProperties map[string]interface{}
}

type _LogDescriptor LogDescriptor

// NewLogDescriptor instantiates a new LogDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogDescriptor(url string, id string, createdAt time.Time, updatedAt time.Time, etag string, parentLogId string, resourceId string, sealed bool, sizeBytes int64, dataUrl string) *LogDescriptor {
	this := LogDescriptor{}
	this.Url = url
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Etag = etag
	this.ParentLogId = parentLogId
	this.ResourceId = resourceId
	this.Sealed = sealed
	this.SizeBytes = sizeBytes
	this.DataUrl = dataUrl
	return &this
}

// NewLogDescriptorWithDefaults instantiates a new LogDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogDescriptorWithDefaults() *LogDescriptor {
	this := LogDescriptor{}
	return &this
}

// GetUrl returns the Url field value
func (o *LogDescriptor) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *LogDescriptor) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *LogDescriptor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogDescriptor) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LogDescriptor) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LogDescriptor) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LogDescriptor) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LogDescriptor) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetEtag returns the Etag field value
func (o *LogDescriptor) GetEtag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Etag
}

// GetEtagOk returns a tuple with the Etag field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetEtagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Etag, true
}

// SetEtag sets field value
func (o *LogDescriptor) SetEtag(v string) {
	o.Etag = v
}

// GetParentLogId returns the ParentLogId field value
func (o *LogDescriptor) GetParentLogId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentLogId
}

// GetParentLogIdOk returns a tuple with the ParentLogId field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetParentLogIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentLogId, true
}

// SetParentLogId sets field value
func (o *LogDescriptor) SetParentLogId(v string) {
	o.ParentLogId = v
}

// GetResourceId returns the ResourceId field value
func (o *LogDescriptor) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *LogDescriptor) SetResourceId(v string) {
	o.ResourceId = v
}

// GetSealed returns the Sealed field value
func (o *LogDescriptor) GetSealed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sealed
}

// GetSealedOk returns a tuple with the Sealed field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetSealedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sealed, true
}

// SetSealed sets field value
func (o *LogDescriptor) SetSealed(v bool) {
	o.Sealed = v
}

// GetSizeBytes returns the SizeBytes field value
func (o *LogDescriptor) GetSizeBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeBytes, true
}

// SetSizeBytes sets field value
func (o *LogDescriptor) SetSizeBytes(v int64) {
	o.SizeBytes = v
}

// GetDataUrl returns the DataUrl field value
func (o *LogDescriptor) GetDataUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataUrl
}

// GetDataUrlOk returns a tuple with the DataUrl field value
// and a boolean to check if the value has been set.
func (o *LogDescriptor) GetDataUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataUrl, true
}

// SetDataUrl sets field value
func (o *LogDescriptor) SetDataUrl(v string) {
	o.DataUrl = v
}

func (o LogDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["etag"] = o.Etag
	toSerialize["parent_log_id"] = o.ParentLogId
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["sealed"] = o.Sealed
	toSerialize["size_bytes"] = o.SizeBytes
	toSerialize["data_url"] = o.DataUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogDescriptor) UnmarshalJSON(bytes []byte) (err error) {
	varLogDescriptor := _LogDescriptor{}

	if err = json.Unmarshal(bytes, &varLogDescriptor); err == nil {
		*o = LogDescriptor(varLogDescriptor)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "etag")
		delete(additionalProperties, "parent_log_id")
		delete(additionalProperties, "resource_id")
		delete(additionalProperties, "sealed")
		delete(additionalProperties, "size_bytes")
		delete(additionalProperties, "data_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogDescriptor struct {
	value *LogDescriptor
	isSet bool
}

func (v NullableLogDescriptor) Get() *LogDescriptor {
	return v.value
}

func (v *NullableLogDescriptor) Set(val *LogDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableLogDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableLogDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogDescriptor(val *LogDescriptor) *NullableLogDescriptor {
	return &NullableLogDescriptor{value: val, isSet: true}
}

func (v NullableLogDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


