/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DockerAWSAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerAWSAuth{}

// DockerAWSAuth struct for DockerAWSAuth
type DockerAWSAuth struct {
	// The ECR AWS region to authenticate to.
	AwsRegion *string `json:"aws_region,omitempty"`
	AwsAccessKeyId SecretString `json:"aws_access_key_id"`
	AwsSecretAccessKey SecretString `json:"aws_secret_access_key"`
	AdditionalProperties map[string]interface{}
}

type _DockerAWSAuth DockerAWSAuth

// NewDockerAWSAuth instantiates a new DockerAWSAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerAWSAuth(awsAccessKeyId SecretString, awsSecretAccessKey SecretString) *DockerAWSAuth {
	this := DockerAWSAuth{}
	this.AwsAccessKeyId = awsAccessKeyId
	this.AwsSecretAccessKey = awsSecretAccessKey
	return &this
}

// NewDockerAWSAuthWithDefaults instantiates a new DockerAWSAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerAWSAuthWithDefaults() *DockerAWSAuth {
	this := DockerAWSAuth{}
	return &this
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise.
func (o *DockerAWSAuth) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion) {
		var ret string
		return ret
	}
	return *o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerAWSAuth) GetAwsRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegion) {
		return nil, false
	}
	return o.AwsRegion, true
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *DockerAWSAuth) HasAwsRegion() bool {
	if o != nil && !IsNil(o.AwsRegion) {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given string and assigns it to the AwsRegion field.
func (o *DockerAWSAuth) SetAwsRegion(v string) {
	o.AwsRegion = &v
}

// GetAwsAccessKeyId returns the AwsAccessKeyId field value
func (o *DockerAWSAuth) GetAwsAccessKeyId() SecretString {
	if o == nil {
		var ret SecretString
		return ret
	}

	return o.AwsAccessKeyId
}

// GetAwsAccessKeyIdOk returns a tuple with the AwsAccessKeyId field value
// and a boolean to check if the value has been set.
func (o *DockerAWSAuth) GetAwsAccessKeyIdOk() (*SecretString, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsAccessKeyId, true
}

// SetAwsAccessKeyId sets field value
func (o *DockerAWSAuth) SetAwsAccessKeyId(v SecretString) {
	o.AwsAccessKeyId = v
}

// GetAwsSecretAccessKey returns the AwsSecretAccessKey field value
func (o *DockerAWSAuth) GetAwsSecretAccessKey() SecretString {
	if o == nil {
		var ret SecretString
		return ret
	}

	return o.AwsSecretAccessKey
}

// GetAwsSecretAccessKeyOk returns a tuple with the AwsSecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *DockerAWSAuth) GetAwsSecretAccessKeyOk() (*SecretString, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsSecretAccessKey, true
}

// SetAwsSecretAccessKey sets field value
func (o *DockerAWSAuth) SetAwsSecretAccessKey(v SecretString) {
	o.AwsSecretAccessKey = v
}

func (o DockerAWSAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerAWSAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsRegion) {
		toSerialize["aws_region"] = o.AwsRegion
	}
	toSerialize["aws_access_key_id"] = o.AwsAccessKeyId
	toSerialize["aws_secret_access_key"] = o.AwsSecretAccessKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DockerAWSAuth) UnmarshalJSON(bytes []byte) (err error) {
	varDockerAWSAuth := _DockerAWSAuth{}

	if err = json.Unmarshal(bytes, &varDockerAWSAuth); err == nil {
		*o = DockerAWSAuth(varDockerAWSAuth)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "aws_region")
		delete(additionalProperties, "aws_access_key_id")
		delete(additionalProperties, "aws_secret_access_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDockerAWSAuth struct {
	value *DockerAWSAuth
	isSet bool
}

func (v NullableDockerAWSAuth) Get() *DockerAWSAuth {
	return v.value
}

func (v *NullableDockerAWSAuth) Set(val *DockerAWSAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerAWSAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerAWSAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerAWSAuth(val *DockerAWSAuth) *NullableDockerAWSAuth {
	return &NullableDockerAWSAuth{value: val, isSet: true}
}

func (v NullableDockerAWSAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerAWSAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


