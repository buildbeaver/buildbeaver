/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ServiceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceDefinition{}

// ServiceDefinition struct for ServiceDefinition
type ServiceDefinition struct {
	// Unique name of the service, within the parent job
	Name string `json:"name"`
	// Name of the Docker image for the service to run
	Image string `json:"image"`
	BasicAuth *DockerBasicAuthDefinition `json:"basic_auth,omitempty"`
	AwsAuth *DockerAWSAuthDefinition `json:"aws_auth,omitempty"`
	// A list of environment variables to export prior to executing the service
	Environment map[string]SecretStringDefinition `json:"environment"`
	AdditionalProperties map[string]interface{}
}

type _ServiceDefinition ServiceDefinition

// NewServiceDefinition instantiates a new ServiceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceDefinition(name string, image string, environment map[string]SecretStringDefinition) *ServiceDefinition {
	this := ServiceDefinition{}
	this.Name = name
	this.Image = image
	this.Environment = environment
	return &this
}

// NewServiceDefinitionWithDefaults instantiates a new ServiceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceDefinitionWithDefaults() *ServiceDefinition {
	this := ServiceDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *ServiceDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceDefinition) SetName(v string) {
	o.Name = v
}

// GetImage returns the Image field value
func (o *ServiceDefinition) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ServiceDefinition) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ServiceDefinition) SetImage(v string) {
	o.Image = v
}

// GetBasicAuth returns the BasicAuth field value if set, zero value otherwise.
func (o *ServiceDefinition) GetBasicAuth() DockerBasicAuthDefinition {
	if o == nil || IsNil(o.BasicAuth) {
		var ret DockerBasicAuthDefinition
		return ret
	}
	return *o.BasicAuth
}

// GetBasicAuthOk returns a tuple with the BasicAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDefinition) GetBasicAuthOk() (*DockerBasicAuthDefinition, bool) {
	if o == nil || IsNil(o.BasicAuth) {
		return nil, false
	}
	return o.BasicAuth, true
}

// HasBasicAuth returns a boolean if a field has been set.
func (o *ServiceDefinition) HasBasicAuth() bool {
	if o != nil && !IsNil(o.BasicAuth) {
		return true
	}

	return false
}

// SetBasicAuth gets a reference to the given DockerBasicAuthDefinition and assigns it to the BasicAuth field.
func (o *ServiceDefinition) SetBasicAuth(v DockerBasicAuthDefinition) {
	o.BasicAuth = &v
}

// GetAwsAuth returns the AwsAuth field value if set, zero value otherwise.
func (o *ServiceDefinition) GetAwsAuth() DockerAWSAuthDefinition {
	if o == nil || IsNil(o.AwsAuth) {
		var ret DockerAWSAuthDefinition
		return ret
	}
	return *o.AwsAuth
}

// GetAwsAuthOk returns a tuple with the AwsAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDefinition) GetAwsAuthOk() (*DockerAWSAuthDefinition, bool) {
	if o == nil || IsNil(o.AwsAuth) {
		return nil, false
	}
	return o.AwsAuth, true
}

// HasAwsAuth returns a boolean if a field has been set.
func (o *ServiceDefinition) HasAwsAuth() bool {
	if o != nil && !IsNil(o.AwsAuth) {
		return true
	}

	return false
}

// SetAwsAuth gets a reference to the given DockerAWSAuthDefinition and assigns it to the AwsAuth field.
func (o *ServiceDefinition) SetAwsAuth(v DockerAWSAuthDefinition) {
	o.AwsAuth = &v
}

// GetEnvironment returns the Environment field value
func (o *ServiceDefinition) GetEnvironment() map[string]SecretStringDefinition {
	if o == nil {
		var ret map[string]SecretStringDefinition
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *ServiceDefinition) GetEnvironmentOk() (*map[string]SecretStringDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *ServiceDefinition) SetEnvironment(v map[string]SecretStringDefinition) {
	o.Environment = v
}

func (o ServiceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["image"] = o.Image
	if !IsNil(o.BasicAuth) {
		toSerialize["basic_auth"] = o.BasicAuth
	}
	if !IsNil(o.AwsAuth) {
		toSerialize["aws_auth"] = o.AwsAuth
	}
	toSerialize["environment"] = o.Environment

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceDefinition) UnmarshalJSON(bytes []byte) (err error) {
	varServiceDefinition := _ServiceDefinition{}

	if err = json.Unmarshal(bytes, &varServiceDefinition); err == nil {
		*o = ServiceDefinition(varServiceDefinition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "image")
		delete(additionalProperties, "basic_auth")
		delete(additionalProperties, "aws_auth")
		delete(additionalProperties, "environment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceDefinition struct {
	value *ServiceDefinition
	isSet bool
}

func (v NullableServiceDefinition) Get() *ServiceDefinition {
	return v.value
}

func (v *NullableServiceDefinition) Set(val *ServiceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceDefinition(val *ServiceDefinition) *NullableServiceDefinition {
	return &NullableServiceDefinition{value: val, isSet: true}
}

func (v NullableServiceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


