/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SecretStringDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretStringDefinition{}

// SecretStringDefinition struct for SecretStringDefinition
type SecretStringDefinition struct {
	// The value of an environment variable, for variables that do not use secrets.
	Value *string `json:"value,omitempty"`
	// The name of the secret that contains the value, for environment variables that use secrets.
	FromSecret *string `json:"from_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecretStringDefinition SecretStringDefinition

// NewSecretStringDefinition instantiates a new SecretStringDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretStringDefinition() *SecretStringDefinition {
	this := SecretStringDefinition{}
	return &this
}

// NewSecretStringDefinitionWithDefaults instantiates a new SecretStringDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretStringDefinitionWithDefaults() *SecretStringDefinition {
	this := SecretStringDefinition{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SecretStringDefinition) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStringDefinition) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SecretStringDefinition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SecretStringDefinition) SetValue(v string) {
	o.Value = &v
}

// GetFromSecret returns the FromSecret field value if set, zero value otherwise.
func (o *SecretStringDefinition) GetFromSecret() string {
	if o == nil || IsNil(o.FromSecret) {
		var ret string
		return ret
	}
	return *o.FromSecret
}

// GetFromSecretOk returns a tuple with the FromSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStringDefinition) GetFromSecretOk() (*string, bool) {
	if o == nil || IsNil(o.FromSecret) {
		return nil, false
	}
	return o.FromSecret, true
}

// HasFromSecret returns a boolean if a field has been set.
func (o *SecretStringDefinition) HasFromSecret() bool {
	if o != nil && !IsNil(o.FromSecret) {
		return true
	}

	return false
}

// SetFromSecret gets a reference to the given string and assigns it to the FromSecret field.
func (o *SecretStringDefinition) SetFromSecret(v string) {
	o.FromSecret = &v
}

func (o SecretStringDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretStringDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.FromSecret) {
		toSerialize["from_secret"] = o.FromSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecretStringDefinition) UnmarshalJSON(bytes []byte) (err error) {
	varSecretStringDefinition := _SecretStringDefinition{}

	if err = json.Unmarshal(bytes, &varSecretStringDefinition); err == nil {
		*o = SecretStringDefinition(varSecretStringDefinition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "from_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecretStringDefinition struct {
	value *SecretStringDefinition
	isSet bool
}

func (v NullableSecretStringDefinition) Get() *SecretStringDefinition {
	return v.value
}

func (v *NullableSecretStringDefinition) Set(val *SecretStringDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretStringDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretStringDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretStringDefinition(val *SecretStringDefinition) *NullableSecretStringDefinition {
	return &NullableSecretStringDefinition{value: val, isSet: true}
}

func (v NullableSecretStringDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretStringDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


