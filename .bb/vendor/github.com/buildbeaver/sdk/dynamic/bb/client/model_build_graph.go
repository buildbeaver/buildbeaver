/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BuildGraph type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildGraph{}

// BuildGraph struct for BuildGraph
type BuildGraph struct {
	Build Build `json:"build"`
	// The current set of jobs making up the build, including the full job graph/steps for each.
	Jobs []JobGraph `json:"jobs"`
	Repo Repo `json:"repo"`
	Commit Commit `json:"commit"`
	AdditionalProperties map[string]interface{}
}

type _BuildGraph BuildGraph

// NewBuildGraph instantiates a new BuildGraph object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildGraph(build Build, jobs []JobGraph, repo Repo, commit Commit) *BuildGraph {
	this := BuildGraph{}
	this.Build = build
	this.Jobs = jobs
	this.Repo = repo
	this.Commit = commit
	return &this
}

// NewBuildGraphWithDefaults instantiates a new BuildGraph object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildGraphWithDefaults() *BuildGraph {
	this := BuildGraph{}
	return &this
}

// GetBuild returns the Build field value
func (o *BuildGraph) GetBuild() Build {
	if o == nil {
		var ret Build
		return ret
	}

	return o.Build
}

// GetBuildOk returns a tuple with the Build field value
// and a boolean to check if the value has been set.
func (o *BuildGraph) GetBuildOk() (*Build, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Build, true
}

// SetBuild sets field value
func (o *BuildGraph) SetBuild(v Build) {
	o.Build = v
}

// GetJobs returns the Jobs field value
func (o *BuildGraph) GetJobs() []JobGraph {
	if o == nil {
		var ret []JobGraph
		return ret
	}

	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value
// and a boolean to check if the value has been set.
func (o *BuildGraph) GetJobsOk() ([]JobGraph, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jobs, true
}

// SetJobs sets field value
func (o *BuildGraph) SetJobs(v []JobGraph) {
	o.Jobs = v
}

// GetRepo returns the Repo field value
func (o *BuildGraph) GetRepo() Repo {
	if o == nil {
		var ret Repo
		return ret
	}

	return o.Repo
}

// GetRepoOk returns a tuple with the Repo field value
// and a boolean to check if the value has been set.
func (o *BuildGraph) GetRepoOk() (*Repo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repo, true
}

// SetRepo sets field value
func (o *BuildGraph) SetRepo(v Repo) {
	o.Repo = v
}

// GetCommit returns the Commit field value
func (o *BuildGraph) GetCommit() Commit {
	if o == nil {
		var ret Commit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *BuildGraph) GetCommitOk() (*Commit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *BuildGraph) SetCommit(v Commit) {
	o.Commit = v
}

func (o BuildGraph) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildGraph) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["build"] = o.Build
	toSerialize["jobs"] = o.Jobs
	toSerialize["repo"] = o.Repo
	toSerialize["commit"] = o.Commit

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BuildGraph) UnmarshalJSON(bytes []byte) (err error) {
	varBuildGraph := _BuildGraph{}

	if err = json.Unmarshal(bytes, &varBuildGraph); err == nil {
		*o = BuildGraph(varBuildGraph)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "build")
		delete(additionalProperties, "jobs")
		delete(additionalProperties, "repo")
		delete(additionalProperties, "commit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBuildGraph struct {
	value *BuildGraph
	isSet bool
}

func (v NullableBuildGraph) Get() *BuildGraph {
	return v.value
}

func (v *NullableBuildGraph) Set(val *BuildGraph) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildGraph) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildGraph) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildGraph(val *BuildGraph) *NullableBuildGraph {
	return &NullableBuildGraph{value: val, isSet: true}
}

func (v NullableBuildGraph) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildGraph) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


