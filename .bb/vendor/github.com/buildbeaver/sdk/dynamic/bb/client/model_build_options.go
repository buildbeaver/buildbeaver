/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BuildOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildOptions{}

// BuildOptions struct for BuildOptions
type BuildOptions struct {
	// True to force all jobs in the build to run by ignoring fingerprints.
	Force bool `json:"force"`
	// Contains zero or more workflows, jobs and steps to run. If no nodes are specified then all workflows, jobs and steps will be run.
	NodesToRun []NodeFQN `json:"nodes_to_run"`
	AdditionalProperties map[string]interface{}
}

type _BuildOptions BuildOptions

// NewBuildOptions instantiates a new BuildOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildOptions(force bool, nodesToRun []NodeFQN) *BuildOptions {
	this := BuildOptions{}
	this.Force = force
	this.NodesToRun = nodesToRun
	return &this
}

// NewBuildOptionsWithDefaults instantiates a new BuildOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildOptionsWithDefaults() *BuildOptions {
	this := BuildOptions{}
	return &this
}

// GetForce returns the Force field value
func (o *BuildOptions) GetForce() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Force
}

// GetForceOk returns a tuple with the Force field value
// and a boolean to check if the value has been set.
func (o *BuildOptions) GetForceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Force, true
}

// SetForce sets field value
func (o *BuildOptions) SetForce(v bool) {
	o.Force = v
}

// GetNodesToRun returns the NodesToRun field value
func (o *BuildOptions) GetNodesToRun() []NodeFQN {
	if o == nil {
		var ret []NodeFQN
		return ret
	}

	return o.NodesToRun
}

// GetNodesToRunOk returns a tuple with the NodesToRun field value
// and a boolean to check if the value has been set.
func (o *BuildOptions) GetNodesToRunOk() ([]NodeFQN, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodesToRun, true
}

// SetNodesToRun sets field value
func (o *BuildOptions) SetNodesToRun(v []NodeFQN) {
	o.NodesToRun = v
}

func (o BuildOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["force"] = o.Force
	toSerialize["nodes_to_run"] = o.NodesToRun

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BuildOptions) UnmarshalJSON(bytes []byte) (err error) {
	varBuildOptions := _BuildOptions{}

	if err = json.Unmarshal(bytes, &varBuildOptions); err == nil {
		*o = BuildOptions(varBuildOptions)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "force")
		delete(additionalProperties, "nodes_to_run")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBuildOptions struct {
	value *BuildOptions
	isSet bool
}

func (v NullableBuildOptions) Get() *BuildOptions {
	return v.value
}

func (v *NullableBuildOptions) Set(val *BuildOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildOptions(val *BuildOptions) *NullableBuildOptions {
	return &NullableBuildOptions{value: val, isSet: true}
}

func (v NullableBuildOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


