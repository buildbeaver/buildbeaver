/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ArtifactDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactDependency{}

// ArtifactDependency struct for ArtifactDependency
type ArtifactDependency struct {
	// The name of the workflow containing the job that will produce the artifact(s), or an empty string for the default workflow.
	Workflow string `json:"workflow"`
	// The name of the job that that will produce the artifact(s).
	JobName string `json:"job_name"`
	// The name of the group of artifacts.
	GroupName string `json:"group_name"`
	AdditionalProperties map[string]interface{}
}

type _ArtifactDependency ArtifactDependency

// NewArtifactDependency instantiates a new ArtifactDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactDependency(workflow string, jobName string, groupName string) *ArtifactDependency {
	this := ArtifactDependency{}
	this.Workflow = workflow
	this.JobName = jobName
	this.GroupName = groupName
	return &this
}

// NewArtifactDependencyWithDefaults instantiates a new ArtifactDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactDependencyWithDefaults() *ArtifactDependency {
	this := ArtifactDependency{}
	return &this
}

// GetWorkflow returns the Workflow field value
func (o *ArtifactDependency) GetWorkflow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value
// and a boolean to check if the value has been set.
func (o *ArtifactDependency) GetWorkflowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workflow, true
}

// SetWorkflow sets field value
func (o *ArtifactDependency) SetWorkflow(v string) {
	o.Workflow = v
}

// GetJobName returns the JobName field value
func (o *ArtifactDependency) GetJobName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value
// and a boolean to check if the value has been set.
func (o *ArtifactDependency) GetJobNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobName, true
}

// SetJobName sets field value
func (o *ArtifactDependency) SetJobName(v string) {
	o.JobName = v
}

// GetGroupName returns the GroupName field value
func (o *ArtifactDependency) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *ArtifactDependency) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *ArtifactDependency) SetGroupName(v string) {
	o.GroupName = v
}

func (o ArtifactDependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workflow"] = o.Workflow
	toSerialize["job_name"] = o.JobName
	toSerialize["group_name"] = o.GroupName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArtifactDependency) UnmarshalJSON(bytes []byte) (err error) {
	varArtifactDependency := _ArtifactDependency{}

	if err = json.Unmarshal(bytes, &varArtifactDependency); err == nil {
		*o = ArtifactDependency(varArtifactDependency)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "workflow")
		delete(additionalProperties, "job_name")
		delete(additionalProperties, "group_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArtifactDependency struct {
	value *ArtifactDependency
	isSet bool
}

func (v NullableArtifactDependency) Get() *ArtifactDependency {
	return v.value
}

func (v *NullableArtifactDependency) Set(val *ArtifactDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactDependency(val *ArtifactDependency) *NullableArtifactDependency {
	return &NullableArtifactDependency{value: val, isSet: true}
}

func (v NullableArtifactDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


