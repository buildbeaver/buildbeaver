package runner

import (
	"crypto/sha1"
	"fmt"
	"hash"
	"sort"

	"github.com/buildbeaver/buildbeaver/runner/logging"
)

type FingerprintHasher struct {
	hash.Hash
	current                  hash.Hash
	currentName              string
	intermediateHashesByName map[string]string
}

func NewFingerprintHasher() *FingerprintHasher {
	return &FingerprintHasher{
		Hash:                     sha1.New(),
		current:                  sha1.New(),
		intermediateHashesByName: map[string]string{},
	}
}

func (h *FingerprintHasher) Reset() {
	h.current.Reset()
	h.Hash.Reset()
}

func (h *FingerprintHasher) Write(p []byte) (n int, err error) {
	return h.current.Write(p)
}

// Append finalizes the current intermediate hash (if any) and appends a new precomputed hash to the hasher.
func (h *FingerprintHasher) Append(name string, hash string) {
	h.Prepare("")
	h.intermediateHashesByName[name] = hash
	h.Hash.Write([]byte(hash))
}

// Prepare an intermediate hash which can be generated by calling Write() one or more times.
// A subsequent call to Prepare, Append or Finalize will finalize this hash.
func (h *FingerprintHasher) Prepare(name string) {
	if h.currentName != "" {
		hash := fmt.Sprintf("%x", h.current.Sum(nil))
		h.intermediateHashesByName[h.currentName] = hash
		h.current.Reset()
		h.Hash.Write([]byte(hash))
	}
	h.currentName = name
}

// Finalize the current intermediate hash (if any), log a report of the hash parts, and return the final fingerprint.
func (h *FingerprintHasher) Finalize(log *logging.StructuredLogger) string {
	h.Prepare("")
	header := "Final fingerprint"
	maxLen := len(header)
	keys := make([]string, 0, len(h.intermediateHashesByName))
	for name, _ := range h.intermediateHashesByName {
		if len(name) > maxLen {
			maxLen = len(name)
		}
		keys = append(keys, name)
	}
	sort.Strings(keys)

	final := fmt.Sprintf("%x", h.Hash.Sum(nil))
	log.WriteLine("Fingerprint parts")
	for _, name := range keys {
		log.WriteLinef("  %-*s: %s", maxLen, name, h.intermediateHashesByName[name])
	}
	log.WriteLinef("%-*s  : %s", maxLen, header, final)

	return final
}
