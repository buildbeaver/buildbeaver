/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EnvVar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvVar{}

// EnvVar struct for EnvVar
type EnvVar struct {
	// Name of the environment variable.
	Name string `json:"name"`
	// Value of the variable, if the variable is set explicitly.
	Value *string `json:"value,omitempty"`
	// ValueFromSecret is the name of the secret to set this variable to, if setting the variable to a secret.
	ValueFromSecret *string `json:"value_from_secret,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EnvVar EnvVar

// NewEnvVar instantiates a new EnvVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvVar(name string) *EnvVar {
	this := EnvVar{}
	this.Name = name
	return &this
}

// NewEnvVarWithDefaults instantiates a new EnvVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvVarWithDefaults() *EnvVar {
	this := EnvVar{}
	return &this
}

// GetName returns the Name field value
func (o *EnvVar) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvVar) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvVar) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnvVar) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVar) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnvVar) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EnvVar) SetValue(v string) {
	o.Value = &v
}

// GetValueFromSecret returns the ValueFromSecret field value if set, zero value otherwise.
func (o *EnvVar) GetValueFromSecret() string {
	if o == nil || IsNil(o.ValueFromSecret) {
		var ret string
		return ret
	}
	return *o.ValueFromSecret
}

// GetValueFromSecretOk returns a tuple with the ValueFromSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvVar) GetValueFromSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ValueFromSecret) {
		return nil, false
	}
	return o.ValueFromSecret, true
}

// HasValueFromSecret returns a boolean if a field has been set.
func (o *EnvVar) HasValueFromSecret() bool {
	if o != nil && !IsNil(o.ValueFromSecret) {
		return true
	}

	return false
}

// SetValueFromSecret gets a reference to the given string and assigns it to the ValueFromSecret field.
func (o *EnvVar) SetValueFromSecret(v string) {
	o.ValueFromSecret = &v
}

func (o EnvVar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvVar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueFromSecret) {
		toSerialize["value_from_secret"] = o.ValueFromSecret
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EnvVar) UnmarshalJSON(bytes []byte) (err error) {
	varEnvVar := _EnvVar{}

	if err = json.Unmarshal(bytes, &varEnvVar); err == nil {
		*o = EnvVar(varEnvVar)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "value_from_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEnvVar struct {
	value *EnvVar
	isSet bool
}

func (v NullableEnvVar) Get() *EnvVar {
	return v.value
}

func (v *NullableEnvVar) Set(val *EnvVar) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvVar) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvVar(val *EnvVar) *NullableEnvVar {
	return &NullableEnvVar{value: val, isSet: true}
}

func (v NullableEnvVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


