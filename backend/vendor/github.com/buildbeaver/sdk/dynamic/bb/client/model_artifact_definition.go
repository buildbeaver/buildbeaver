/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ArtifactDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactDefinition{}

// ArtifactDefinition struct for ArtifactDefinition
type ArtifactDefinition struct {
	// Uniquely identifies the group of artifacts specified in paths
	Name string `json:"name"`
	// One or more relative paths to artifacts that should be uploaded at the end of the build; these paths will be globbed, so that each path may identify one or more actual files
	Paths []string `json:"paths"`
	AdditionalProperties map[string]interface{}
}

type _ArtifactDefinition ArtifactDefinition

// NewArtifactDefinition instantiates a new ArtifactDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactDefinition(name string, paths []string) *ArtifactDefinition {
	this := ArtifactDefinition{}
	this.Name = name
	this.Paths = paths
	return &this
}

// NewArtifactDefinitionWithDefaults instantiates a new ArtifactDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactDefinitionWithDefaults() *ArtifactDefinition {
	this := ArtifactDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *ArtifactDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArtifactDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArtifactDefinition) SetName(v string) {
	o.Name = v
}

// GetPaths returns the Paths field value
func (o *ArtifactDefinition) GetPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *ArtifactDefinition) GetPathsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *ArtifactDefinition) SetPaths(v []string) {
	o.Paths = v
}

func (o ArtifactDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["paths"] = o.Paths

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArtifactDefinition) UnmarshalJSON(bytes []byte) (err error) {
	varArtifactDefinition := _ArtifactDefinition{}

	if err = json.Unmarshal(bytes, &varArtifactDefinition); err == nil {
		*o = ArtifactDefinition(varArtifactDefinition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "paths")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArtifactDefinition struct {
	value *ArtifactDefinition
	isSet bool
}

func (v NullableArtifactDefinition) Get() *ArtifactDefinition {
	return v.value
}

func (v *NullableArtifactDefinition) Set(val *ArtifactDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactDefinition(val *ArtifactDefinition) *NullableArtifactDefinition {
	return &NullableArtifactDefinition{value: val, isSet: true}
}

func (v NullableArtifactDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


