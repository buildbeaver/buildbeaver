/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DockerConfigDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DockerConfigDefinition{}

// DockerConfigDefinition struct for DockerConfigDefinition
type DockerConfigDefinition struct {
	// The default Docker image to run the job steps in, if the job is of type Docker
	Image string `json:"image"`
	// Determines if/when the Docker image is pulled during job execution, if the job is of type Docker
	Pull string `json:"pull"`
	BasicAuth *DockerBasicAuthDefinition `json:"basic_auth,omitempty"`
	AwsAuth *DockerAWSAuthDefinition `json:"aws_auth,omitempty"`
	// Path to the shell to use to run build scripts with inside the container
	Shell *string `json:"shell,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DockerConfigDefinition DockerConfigDefinition

// NewDockerConfigDefinition instantiates a new DockerConfigDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerConfigDefinition(image string, pull string) *DockerConfigDefinition {
	this := DockerConfigDefinition{}
	this.Image = image
	this.Pull = pull
	return &this
}

// NewDockerConfigDefinitionWithDefaults instantiates a new DockerConfigDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerConfigDefinitionWithDefaults() *DockerConfigDefinition {
	this := DockerConfigDefinition{}
	return &this
}

// GetImage returns the Image field value
func (o *DockerConfigDefinition) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DockerConfigDefinition) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *DockerConfigDefinition) SetImage(v string) {
	o.Image = v
}

// GetPull returns the Pull field value
func (o *DockerConfigDefinition) GetPull() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pull
}

// GetPullOk returns a tuple with the Pull field value
// and a boolean to check if the value has been set.
func (o *DockerConfigDefinition) GetPullOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pull, true
}

// SetPull sets field value
func (o *DockerConfigDefinition) SetPull(v string) {
	o.Pull = v
}

// GetBasicAuth returns the BasicAuth field value if set, zero value otherwise.
func (o *DockerConfigDefinition) GetBasicAuth() DockerBasicAuthDefinition {
	if o == nil || IsNil(o.BasicAuth) {
		var ret DockerBasicAuthDefinition
		return ret
	}
	return *o.BasicAuth
}

// GetBasicAuthOk returns a tuple with the BasicAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfigDefinition) GetBasicAuthOk() (*DockerBasicAuthDefinition, bool) {
	if o == nil || IsNil(o.BasicAuth) {
		return nil, false
	}
	return o.BasicAuth, true
}

// HasBasicAuth returns a boolean if a field has been set.
func (o *DockerConfigDefinition) HasBasicAuth() bool {
	if o != nil && !IsNil(o.BasicAuth) {
		return true
	}

	return false
}

// SetBasicAuth gets a reference to the given DockerBasicAuthDefinition and assigns it to the BasicAuth field.
func (o *DockerConfigDefinition) SetBasicAuth(v DockerBasicAuthDefinition) {
	o.BasicAuth = &v
}

// GetAwsAuth returns the AwsAuth field value if set, zero value otherwise.
func (o *DockerConfigDefinition) GetAwsAuth() DockerAWSAuthDefinition {
	if o == nil || IsNil(o.AwsAuth) {
		var ret DockerAWSAuthDefinition
		return ret
	}
	return *o.AwsAuth
}

// GetAwsAuthOk returns a tuple with the AwsAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfigDefinition) GetAwsAuthOk() (*DockerAWSAuthDefinition, bool) {
	if o == nil || IsNil(o.AwsAuth) {
		return nil, false
	}
	return o.AwsAuth, true
}

// HasAwsAuth returns a boolean if a field has been set.
func (o *DockerConfigDefinition) HasAwsAuth() bool {
	if o != nil && !IsNil(o.AwsAuth) {
		return true
	}

	return false
}

// SetAwsAuth gets a reference to the given DockerAWSAuthDefinition and assigns it to the AwsAuth field.
func (o *DockerConfigDefinition) SetAwsAuth(v DockerAWSAuthDefinition) {
	o.AwsAuth = &v
}

// GetShell returns the Shell field value if set, zero value otherwise.
func (o *DockerConfigDefinition) GetShell() string {
	if o == nil || IsNil(o.Shell) {
		var ret string
		return ret
	}
	return *o.Shell
}

// GetShellOk returns a tuple with the Shell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerConfigDefinition) GetShellOk() (*string, bool) {
	if o == nil || IsNil(o.Shell) {
		return nil, false
	}
	return o.Shell, true
}

// HasShell returns a boolean if a field has been set.
func (o *DockerConfigDefinition) HasShell() bool {
	if o != nil && !IsNil(o.Shell) {
		return true
	}

	return false
}

// SetShell gets a reference to the given string and assigns it to the Shell field.
func (o *DockerConfigDefinition) SetShell(v string) {
	o.Shell = &v
}

func (o DockerConfigDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DockerConfigDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	toSerialize["pull"] = o.Pull
	if !IsNil(o.BasicAuth) {
		toSerialize["basic_auth"] = o.BasicAuth
	}
	if !IsNil(o.AwsAuth) {
		toSerialize["aws_auth"] = o.AwsAuth
	}
	if !IsNil(o.Shell) {
		toSerialize["shell"] = o.Shell
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DockerConfigDefinition) UnmarshalJSON(bytes []byte) (err error) {
	varDockerConfigDefinition := _DockerConfigDefinition{}

	if err = json.Unmarshal(bytes, &varDockerConfigDefinition); err == nil {
		*o = DockerConfigDefinition(varDockerConfigDefinition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "image")
		delete(additionalProperties, "pull")
		delete(additionalProperties, "basic_auth")
		delete(additionalProperties, "aws_auth")
		delete(additionalProperties, "shell")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDockerConfigDefinition struct {
	value *DockerConfigDefinition
	isSet bool
}

func (v NullableDockerConfigDefinition) Get() *DockerConfigDefinition {
	return v.value
}

func (v *NullableDockerConfigDefinition) Set(val *DockerConfigDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerConfigDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerConfigDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerConfigDefinition(val *DockerConfigDefinition) *NullableDockerConfigDefinition {
	return &NullableDockerConfigDefinition{value: val, isSet: true}
}

func (v NullableDockerConfigDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerConfigDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


