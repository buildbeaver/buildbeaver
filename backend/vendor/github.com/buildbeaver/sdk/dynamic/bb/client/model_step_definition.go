/*
BuildBeaver Dynamic Build API - OpenAPI 3.0

This is the BuildBeaver Dynamic Build API.

API version: 0.3.00
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the StepDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StepDefinition{}

// StepDefinition struct for StepDefinition
type StepDefinition struct {
	// Step name, in URL format
	Name string `json:"name"`
	// Optional human-readable description of the job.
	Description *string `json:"description,omitempty"`
	// A list of one or more shell commands to execute during the step.
	Commands []string `json:"commands"`
	// Dependencies this step has on other steps within the job (see dependency syntax)
	Depends []string `json:"depends,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StepDefinition StepDefinition

// NewStepDefinition instantiates a new StepDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStepDefinition(name string, commands []string) *StepDefinition {
	this := StepDefinition{}
	this.Name = name
	this.Commands = commands
	return &this
}

// NewStepDefinitionWithDefaults instantiates a new StepDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStepDefinitionWithDefaults() *StepDefinition {
	this := StepDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *StepDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StepDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StepDefinition) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StepDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StepDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StepDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StepDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetCommands returns the Commands field value
func (o *StepDefinition) GetCommands() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value
// and a boolean to check if the value has been set.
func (o *StepDefinition) GetCommandsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commands, true
}

// SetCommands sets field value
func (o *StepDefinition) SetCommands(v []string) {
	o.Commands = v
}

// GetDepends returns the Depends field value if set, zero value otherwise.
func (o *StepDefinition) GetDepends() []string {
	if o == nil || IsNil(o.Depends) {
		var ret []string
		return ret
	}
	return o.Depends
}

// GetDependsOk returns a tuple with the Depends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StepDefinition) GetDependsOk() ([]string, bool) {
	if o == nil || IsNil(o.Depends) {
		return nil, false
	}
	return o.Depends, true
}

// HasDepends returns a boolean if a field has been set.
func (o *StepDefinition) HasDepends() bool {
	if o != nil && !IsNil(o.Depends) {
		return true
	}

	return false
}

// SetDepends gets a reference to the given []string and assigns it to the Depends field.
func (o *StepDefinition) SetDepends(v []string) {
	o.Depends = v
}

func (o StepDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StepDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["commands"] = o.Commands
	if !IsNil(o.Depends) {
		toSerialize["depends"] = o.Depends
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StepDefinition) UnmarshalJSON(bytes []byte) (err error) {
	varStepDefinition := _StepDefinition{}

	if err = json.Unmarshal(bytes, &varStepDefinition); err == nil {
		*o = StepDefinition(varStepDefinition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "commands")
		delete(additionalProperties, "depends")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStepDefinition struct {
	value *StepDefinition
	isSet bool
}

func (v NullableStepDefinition) Get() *StepDefinition {
	return v.value
}

func (v *NullableStepDefinition) Set(val *StepDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableStepDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableStepDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepDefinition(val *StepDefinition) *NullableStepDefinition {
	return &NullableStepDefinition{value: val, isSet: true}
}

func (v NullableStepDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


